{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","summary","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","showBurger","goBack","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","changed","invalid","shouldValidate","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","checkoutContinuedHandler","replace","goBackHandler","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.17f071fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    //show burger\r\n    let summary = <div className={classes.CheckoutSummary}>\r\n        <h1>Press CONTINUE to confirm your order!</h1>\r\n        <div style={{width: '100%', margin:'auto'}}>\r\n            <Burger ingredients={props.ingredients}/>\r\n        </div>\r\n        <Button \r\n            btnType=\"Danger\"\r\n            clicked={props.checkoutCancelled}\r\n        >CANCEL</Button>\r\n        <Button \r\n            btnType=\"Success\"\r\n            clicked={props.checkoutContinued}\r\n        >CONTINUE</Button>\r\n    </div>;\r\n    //don't show burger upon contact data\r\n    if (props.showBurger === false) {\r\n        summary = <div className={classes.CheckoutSummary}><Button \r\n            btnType=\"Danger\"\r\n            clicked={props.goBack}\r\n        >BACK</Button></div>;\r\n    }\r\n    return summary;\r\n}\r\n\r\nexport default checkoutSummary;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {updateObject, checkValidity} from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: { //configuration - attributes set up for the chosen HTML tag\r\n                    type: 'text',\r\n                    placeholder: 'Your Name (required)'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    //required: true\r\n                },\r\n                valid: true,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zip Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    //required: true,\r\n                    //minLength: 5,\r\n                    //maxLength: 5\r\n                },\r\n                valid: true,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    //required: true\r\n                },\r\n                valid: true,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-mail (required)'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ],\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        //prevent default to send a request (which reloads the form)\r\n        event.preventDefault();\r\n\r\n        //extract input value\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        //create order object\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n    //handle form user input\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            //properties to overwrite\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n\r\n        //check if overall form is valid\r\n        let formIsValid = true;\r\n        \r\n        //loop through all element's valid state\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        //update states\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    render() {\r\n        //turn orderForm object into array of input element we can loop through\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        //if not loading, then set form to form element\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched = {formElement.config.touched}\r\n                    />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        //if loading, then show spinner\r\n        if (this.props.loading) {\r\n            form = <Spinner/>;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from '../Checkout/ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n    state = {\r\n        showBurger: true\r\n    }\r\n    //go back to burger builder when CANCEL clicked\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    //will load contactData component when CONTINUE clicked\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n        this.setState({showBurger: false});\r\n    }\r\n\r\n    //show burger again & no contact data when pressed back from contact data\r\n    goBackHandler = () => {\r\n        this.setState({showBurger: true});\r\n        this.props.history.replace('/checkout');\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\"/>\r\n        //if there are ingredients\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        showBurger={this.state.showBurger}\r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler}\r\n                        goBack={this.goBackHandler}\r\n                    />\r\n                    <Route \r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData}\r\n                    /> \r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    let inputClasses = [classes.InputElement];\r\n\r\n    //check if input is valid, has validiation, touched before\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    //set different input types\r\n    switch (props.elementType) {\r\n        case('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} //join classes into long string separated by space\r\n                {...props.elementConfig} //distributes props passed\r\n                value={props.value}\r\n                onChange={props.changed}/> \r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1kp3k\",\"Label\":\"Input_Label__do8u0\",\"InputElement\":\"Input_InputElement__2TaIW\",\"Invalid\":\"Input_Invalid__DZhUr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__35k1l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2N_Gf\"};"],"sourceRoot":""}