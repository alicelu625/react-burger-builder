{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","changed","invalid","shouldValidate","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.036c5722.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}\r\n            >CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}\r\n            >CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport {updateObject, checkValidity} from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: { //configuration - attributes set up for the chosen HTML tag\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zip Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ],\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        //prevent default to send a request (which reloads the form)\r\n        event.preventDefault();\r\n        //this.setState({loading: true}); //show spinner when continued\r\n        //extract input value\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        //create order object\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price, //on real application, should calculate price on server\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        /*removed because Redux implemented this action\r\n        //POST request\r\n        axios.post('/orders.json', order) //path gets appended to baseURL path\r\n            .then(response => {\r\n                this.setState({loading: false}); //stop spinner\r\n                //redirect once submitted\r\n                this.props.history.push('/');\r\n            })\r\n            .catch(error => {\r\n                this.setState({loading: false}); //stop spinner\r\n            });*/\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n    //handle form user input\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            //properties to overwrite\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n        /*\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm //copy object distributing all properties\r\n        };*/\r\n        //also clone properties inside of selected order form element deeply\r\n        //...updatedOrderForm[inputIdentifier] //distribute properties\r\n        /*\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[inputIdentifier] = updatedFormElement;*/\r\n\r\n        //check if overall form is valid\r\n        let formIsValid = true;\r\n        //loop through all element's valid state\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        //update states\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    render() {\r\n        //turn orderForm object into array of input element we can loop through\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        //if not loading, then set form to form element\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched = {formElement.config.touched}\r\n                    />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        //if loading, then show spinner\r\n        if (this.props.loading) {\r\n            form = <Spinner/>;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from '../Checkout/ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n    /*remove because states now managed in Redux\r\n    state = {\r\n        ingredients: null,\r\n        price: 0\r\n    }\r\n    */\r\n\r\n    /*remove because now get ingredients using Redux\r\n    //extract URL\r\n    UNSAFE_componentWillMount() {\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        const ingredients = {}; //to store ingredients\r\n        let price = 0;\r\n        //format: ['salad', '1']\r\n        for (let param of query.entries()) {\r\n            //if it is price, don't add to ingredient object\r\n            if (param[0] === 'price') {\r\n                //extract price & store\r\n                price = param[1];\r\n            } else { \r\n                ingredients[param[0]] = +param[1]; //turns into number with a +\r\n            }\r\n        }\r\n        this.setState({ingredients: ingredients, totalPrice: price});\r\n    }\r\n    */\r\n\r\n    //go back to burger builder when CANCEL clicked\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    //will load contactData component when CONTINUE clicked\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');   \r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\"/>\r\n        //if there are ingredients\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler}\r\n                    />\r\n                    <Route \r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData}\r\n                        /*remove because no longer need to use price (Redux)\r\n                        //can pass props by rendering it manually\r\n                        render={(props) => (<ContactData ingredients={this.state.ings} price={this.state.totalPrice} {...props}/>)}\r\n                        */\r\n                    /> \r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    let inputClasses = [classes.InputElement];\r\n\r\n    //check if input is valid, has validiation, touched before\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    //set different input types\r\n    switch (props.elementType) {\r\n        case('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} //join classes into long string separated by space\r\n                {...props.elementConfig} //distributes props passed\r\n                value={props.value}\r\n                onChange={props.changed}/> \r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1kp3k\",\"Label\":\"Input_Label__do8u0\",\"InputElement\":\"Input_InputElement__2TaIW\",\"Invalid\":\"Input_Invalid__DZhUr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__35k1l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2N_Gf\"};"],"sourceRoot":""}